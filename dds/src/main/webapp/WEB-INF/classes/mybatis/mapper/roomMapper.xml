<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.fly.dds.mapper.roomMapper">

	<sql id="where-list">
		<choose>
			<when test="schType == 'all' ">
				( INSTR(subject, #{kwd}) &gt; 0
				    OR  DBMS_LOB.INSTR(content, #{kwd}) &gt; 0 )
			</when>
			<when test="schType == 'reg_date' ">
				( TO_CHAR(reg_date, 'YYYYMMDD') = #{kwd} 
					OR TO_CHAR(reg_date, 'YYYY-MM-DD') = #{kwd} )
			</when>
			<when test="schType == 'content' ">
				DBMS_LOB.INSTR(content, #{kwd}) &gt; 0 
			</when>
			<otherwise>
				INSTR(subject, #{kwd}) &gt; 0
			</otherwise>
		</choose>
	</sql>

	<!-- 글개수 -->
	<select id="dataCount" parameterType="map" resultType="Integer">
		SELECT NVL(COUNT(distinct r.num), 0)
		FROM room r
		join room_detail d on r.num = d.num
		where instr(subject , #{kwd}) &gt; 0
		and people &gt;= #{people}
	</select>
	
	<!-- 글리스트 -->
	<!--  
	<select id="listRoom" parameterType="map"
			resultType="com.fly.dds.domain.Room">
		SELECT num , subject , addr1 , addr2 , room_type
		FROM room r
		<where>
			<if test="kwd != null and kwd != '' ">
				<include refid="where-list"/>
			</if>
		</where>
		ORDER BY num DESC
		OFFSET #{offset} ROWS FETCH FIRST #{size} ROWS ONLY		
	</select>
	-->
	
	<sql id="search-where-list">
	  <choose>
	    <when test="kwd != null and kwd != ''">
	      <choose>
	        <when test="people != null and sdate != null and edate != null">
	          INSTR(subject, #{kwd}) &gt; 0
	          AND people &gt;= #{people}
	          AND sdate &lt; #{sdate}
	          AND edate &gt; #{edate}
	        </when>
	        <when test="people != null and (sdate == null or edate == null)">
	          INSTR(subject, #{kwd}) &gt; 0
	          AND people &gt;= #{people}
	        </when>
	        <when test="sdate != null and edate != null and people == null">
	          INSTR(subject, #{kwd}) &gt; 0
	          AND sdate &lt; #{sdate}
	          AND edate &gt; #{edate}
	        </when>
	        <otherwise>
	          INSTR(subject, #{kwd}) &gt; 0
	          and people &gt;= #{people}
	        </otherwise>
	      </choose>
	    </when>
	    <otherwise>
	      1 = 0
	    </otherwise>
	  </choose>
	</sql>

	
	<!-- 숙소 검색 -->
	<!-- public List<Room> searchRoom(String kwd, String sdate, String edate, int people);  -->
	<select id="listRoom" parameterType="map" resultType="com.fly.dds.domain.Room">
		SELECT r.num, r.subject, r.addr1, r.addr2, r.room_type, NVL(AVG(rr.rating), 0) AS rating, NVL(COUNT(rr.review_num), 0) AS review_count, 
				MIN(d.price) AS price, r.facility_content AS facility_content, r.key_value AS key_value , r.thumbnail , MIN(d.people) as people
		FROM room r 
		LEFT OUTER JOIN room_detail d ON r.num = d.num
		LEFT OUTER JOIN room_review rr ON r.num = rr.num
		where instr(subject , #{kwd}) &gt; 0
		and people &gt;= #{people}
		and active = 1
		GROUP BY r.num, r.subject, r.addr1, r.addr2, r.room_type, r.facility_content, r.key_value , r.thumbnail
		ORDER BY price DESC
		OFFSET #{offset} ROWS FETCH FIRST #{size} ROWS ONLY	
	</select>
	
	<select id="listDetail" parameterType="map" resultType="com.fly.dds.domain.Room">
	select detail_num , people , price , name , d.content , point , r.num , discount , detail_photo 
	from room_detail d
	join room r on d.num = r.num
	where r.num=#{num}
	</select>
	
	<!-- detail 값 가져오기 -->
	<select id="findByDetail" parameterType="Long" resultType="com.fly.dds.domain.Room">
		select subject, detail_num , people , price , discount , name , thumbnail , r.num
		from room_detail d
		join room r on d.num = r.num
		where d.detail_num = #{detail_num}
	</select>
	
	<select id="listPhoto" parameterType="map" resultType="com.fly.dds.domain.Room">
	select photo_num , photo , p.num
	from room_photo p
	join room r on p.num = r.num
	where p.num = #{num}
	</select>
	
	<select id="findByNum" parameterType="Long" resultType="com.fly.dds.domain.Room">
		SELECT r.num, subject, room_type, addr1, addr2, r.content, facility_content, caution, thumbnail , price
		FROM room r
		left outer join ( select num , min(price) as price from room_detail group by num ) d on r.num = d.num
		WHERE r.num = #{num}
	</select>
	
	<insert id="insertRoomWishList" parameterType="map">
		insert into room_wish_list ( user_num , num ) values ( #{user_num} , #{num} )
	</insert>
	
</mapper>
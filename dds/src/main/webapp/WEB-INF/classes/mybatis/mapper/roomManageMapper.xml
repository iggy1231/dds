<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.fly.dds.admin.mapper.RoomManageMapper">

	<sql id="where-list">
		<choose>
			<when test="schType == 'all' ">
				( INSTR(subject, #{kwd}) &gt; 0 )
			</when>
		</choose>
	</sql>


  <select id="roomSeq" resultType="Long">
  	SELECT room_seq.nextval FROM dual
  </select>

<!-- 숙소 등록 -->
	<!-- public void insertRoom(Room dto) throws SQLException; -->
	<insert id="insertRoom" parameterType="com.fly.dds.domain.Room">
		insert into room ( num , subject , content , caution , room_type , reg_date
		, post_num , addr1 , addr2 , thumbnail , key_value , facility_content ,  active )
		values ( #{num} , #{subject}, #{content} , #{caution} , #{room_type} , sysdate
		, #{post_num} , #{addr1} , #{addr2} , #{thumbnail} , #{key_value} , #{facility_content}, #{active} )
	</insert>

<!-- 파일(추가 이미지) 등록 -->
	<!-- public void insertRoomFile(Room dto) throws SQLException; -->
	<insert id="insertRoomFile" parameterType="com.fly.dds.domain.Room">
		insert into room_photo(photo_num , photo , num ) values 
		(room_photo_seq.nextval , #{photo} , #{num} )
	</insert>
			
	
<!-- 상세정보 등록 -->
	<!-- public void insertRoomDetail(Room dto) throws SQLException; -->
	<insert id="insertRoomDetail" parameterType="com.fly.dds.domain.Room">
		insert into room_detail(detail_num , people , price , discount , name ,
		content , detail_photo , point , num ) values 
		(room_detail_seq.nextval , #{people} , #{price} , #{discount} , #{name} , 
		#{detail_content} , #{detail_photo} , #{point} , #{num} )
	</insert>

<!-- room list -->
	<!-- public int dataCount(Map<String, Object> map);
	public List<Room> listRoom(Map<String, Object> map);
	public Room findById(long num);
	public List<Room> listRoomFile(long num); -->
	
	<select id="dataCount" parameterType="map" resultType="Integer">
		SELECT NVL(COUNT(*) , 0)
		FROM room
	</select>
	
	<select id="listRoom" parameterType="map" resultType="com.fly.dds.domain.Room">
		SELECT r.num, post_num, active, r.subject, r.addr1, r.addr2, r.room_type, NVL(AVG(rr.rating), 0) AS rating, NVL(COUNT(rr.review_num), 0) AS review_count, 
				MIN(d.price) AS price, r.facility_content AS facility_content, r.key_value AS key_value , r.thumbnail , MIN(d.people) as people, TO_CHAR(r.reg_date, 'YYYY-MM-DD') reg_date
		FROM room r
		LEFT OUTER JOIN room_detail d ON r.num = d.num
		LEFT OUTER JOIN room_review rr ON r.num = rr.num
		<where>
			<if test="kwd != null and kwd != ''">
			<include refid="where-list"/>
			</if>
		</where>
		GROUP BY r.num, r.subject, r.addr1, r.addr2, r.room_type, r.facility_content, r.key_value , r.thumbnail, active, r.reg_date, post_num
		ORDER BY reg_date DESC
		OFFSET #{offset} ROWS FETCH FIRST #{size} ROWS ONLY
	</select>
	
	<!-- 상품 상세 정보 -->
	<!-- public Room findById(long num); -->
	<select id="findById" parameterType="Long" resultType="com.fly.dds.domain.Room">
		SELECT r.num, post_num, subject, room_type, addr1, addr2, r.content, facility_content, caution, thumbnail , price, active, key_value, facility_content, content as detail_content
		FROM room r
		left outer join ( select num , min(price) as price from room_detail group by num ) d on r.num = d.num
		WHERE r.num = #{num}
	</select>

<!-- update -->
	<!-- public void updateRoom   	(Room dto)  -->
	<update id="updateRoom" parameterType="com.fly.dds.domain.Room">
		UPDATE room SET subject = #{subject}, content = #{content}, caution = #{caution}, room_type = #{room_type}, 
			reg_date = sysdate, post_num = #{post_num}, addr1 = #{addr1}, addr2 = #{addr2} , thumbnail = #{thumbnail, jdbcType=VARCHAR}, key_value = #{key_value},
			facility_content = #{facility_content}, active = #{active}
		WHERE num = #{num}
	</update>
	
	<update id="updateRoomDetail" parameterType="com.fly.dds.domain.Room" >
		UPDATE room_detail SET people = #{people}, price = #{price}, discount = #{discount}, name = #{name}, content = #{detail_content},
			detail_photo = #{detail_photo, jdbcType=VARCHAR}
		WHERE detail_num = #{detail_num}
	</update>
	
	<update id="updateRoomFile" parameterType="com.fly.dds.domain.Room">
		UPDATE room_photo SET photo = #{photo} 
		WHERE photo_num = #{photo_num} 
	</update>
	
	<select id="listSale" parameterType="map" resultType="com.fly.dds.domain.RoomPayment">
		select s.sale_num , s.reg_date , to_char(s.sdate , 'yyyy-mm-dd') sdate , to_char(s.edate , 'yyyy-mm-dd') edate,
		s.total_price , s.coupon_price , s.point_price , s.discount , s.final_price , s.name , s.detail_num , s.user_num  , subject , m.nickname,
        pc.imp_uid , pc.card_name , pc.card_num
        from room_sale s
        join room_detail d on s.detail_num = d.detail_num
        join room r on d.num = r.num
        join member_info m on s.user_num = m.user_num
        left outer join room_pay_cash pc on s.sale_num = pc.sale_num
        left outer join room_refund rr on pc.sale_num = rr.sale_num
        where ( rr.sale_num is null )
        OFFSET #{offset} ROWS FETCH FIRST #{size} ROWS ONLY
	</select>
	
	<select id="saleCount" parameterType="map" resultType="Integer">
		SELECT NVL(COUNT(*) , 0)
		FROM room_sale
	</select>
	
	
	<select id="listRefund" parameterType="map" resultType="com.fly.dds.domain.RoomPayment">
		select s.sale_num , rf.refund_date, rf.refund_price, rf.refund_reason, s.reg_date , s.coupon_price , s.point_price , s.discount , s.final_price , s.name , s.detail_num , s.user_num  , subject , m.nickname,
        pc.imp_uid
        from room_refund rf
        left outer join room_sale s on rf.sale_num = s.sale_num
        join room_detail d on s.detail_num = d.detail_num
        join room r on d.num = r.num
        join member_info m on s.user_num = m.user_num
        left outer join room_pay_cash pc on s.sale_num = pc.sale_num
        OFFSET #{offset} ROWS FETCH FIRST #{size} ROWS ONLY
	</select>
	
	<select id="refundCount" parameterType="map" resultType="Integer">
		SELECT NVL(COUNT(*) , 0)
		FROM room_refund
	</select>

</mapper>
<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.fly.dds.mapper.MyPageMapper">

	<select id="findById" parameterType="Long" resultType="com.fly.dds.domain.Member">
		select m.user_num , userId , pwd , userName , nickName , to_char(birth , 'yyyy-mm-dd') birth , gender , email , 
		tel , content , photo , mbti
		from member1 m
		join member_info i on m.user_num = i.user_num
		join member_profile p on m.user_num = p.user_num
		where m.user_num = #{user_num}
	</select>

	<update id="updateMbti" parameterType="com.fly.dds.domain.Member">
		UPDATE member_profile SET mbti = #{mbti}
		WHERE user_num = #{user_num}
	</update>
	
	<update id="updateProfile" parameterType="com.fly.dds.domain.Member">
		UPDATE member_profile SET content = #{content}, 
			photo = CASE WHEN #{photo} IS NOT NULL THEN #{photo, jdbcType=VARCHAR} ELSE photo END
		WHERE user_num = #{user_num}
	</update>

	<update id="updateInfo" parameterType="com.fly.dds.domain.Member">
		UPDATE member_info SET nickname=#{nickName} , gender=#{gender} , tel=#{tel} , modify_date = sysdate
		WHERE user_num = #{user_num}
	</update>
	
	<update id="updateMember" parameterType="com.fly.dds.domain.Member">
		UPDATE member1 SET username = #{userName}
		WHERE user_num = #{user_num}
	</update>
	
	<update id="deleteMember" parameterType="Long">
		UPDATE member1 SET enabled = 0
		WHERE user_num = #{user_num}
	</update>
	
	<delete id="deleteInfo" parameterType="Long">
		DELETE member_info where user_num = #{user_num}
	</delete>
	
	<delete id="deleteProfile" parameterType="Long">
		DELETE member_profile where user_num = #{user_num}
	</delete>
	
	<select id="listReview" parameterType="map" resultType="com.fly.dds.domain.TravelReview">
	    SELECT t.NUM,SUBJECT,TO_CHAR(REG_DATE, 'YYYY-MM-dd') REG_DATE, HITCOUNT,LIKECOUNT,REPLYCOUNT, imageFileName
		FROM TRAVELREVIEW t
		left outer join ( select num , count(*) as likecount from travelReview_like group by num) l on t.num = l.num
		left outer join ( select num , count(*) as replycount from travelReview_reply group by num ) r on t.num = r.num
		left outer join TravelReview_File f ON t.num = f.num 
		where user_num = #{user_num}
		ORDER BY NUM DESC
		OFFSET #{offset} ROWS FETCH FIRST #{size} ROWS ONLY
	</select>
	
	<!-- 글개수 -->
	<select id="dataCount" parameterType="map" resultType="Integer">
		SELECT NVL(COUNT(distinct t.num), 0)
		FROM travelReview t
		JOIN member1 m on t.user_num = m.user_num
		WHERE m.user_num = #{user_num}
	</select>
	
	<select id="listReply" parameterType="map" resultType="com.fly.dds.domain.MyPage">
		select user_num  , reply_num , num , content , to_char(reg_date , 'yyyy-mm-dd') reg_date , boardname
		from
		(select user_num ,reply_num , num , content , reg_date, 'travelreview' as boardname
		from travelreview_reply
		union all
		select user_num ,reply_num , num , content ,reg_date  , 'info' as boardname
		from info_reply
		union all
		select user_num ,reply_num , num , content ,reg_date , 'companion' as boardname
		from companion_reply
		order by reg_date desc)
		where user_num = #{user_num}
		OFFSET #{offset} ROWS FETCH FIRST #{size} ROWS ONLY
	</select>
	
	<select id="replyCount" parameterType="map" resultType="Integer">
	select count(reply_num)
	from (
    select user_num, reply_num
    from travelreview_reply
    union all
    select user_num, reply_num
    from info_reply
    union all
    select user_num, reply_num
    from companion_reply
	)
	where user_num = #{user_num}
	</select>
	
	<delete id="deleteReply">
	delete ${boardname}_reply where reply_num = #{reply_num}
	</delete>
	
	<select id="listRoom" parameterType="map" resultType="com.fly.dds.domain.Room">
		<!-- where 절로 discount랑 price해주기 -->
	    SELECT num , subject , addr1 , addr2 , room_type
		FROM room r
		<where>
            <if test="discount == 0">
                AND d.DISCOUNT >= #{discount}
            </if>
        </where>
		ORDER BY num DESC
		OFFSET #{offset} ROWS FETCH FIRST #{size} ROWS ONLY	
	</select>
</mapper>
<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.fly.dds.mapper.MyPageMapper">

	<select id="findById" parameterType="Long" resultType="com.fly.dds.domain.Member">
		select m.user_num , userId , pwd , userName , nickName , to_char(birth , 'yyyy-mm-dd') birth , gender , email , 
		tel , content , photo , mbti
		from member1 m
		join member_info i on m.user_num = i.user_num
		join member_profile p on m.user_num = p.user_num
		where m.user_num = #{user_num}
	</select>

	<update id="updateMbti" parameterType="com.fly.dds.domain.Member">
		UPDATE member_profile SET mbti = #{mbti}
		WHERE user_num = #{user_num}
	</update>
	
	<update id="updateProfile" parameterType="com.fly.dds.domain.Member">
		UPDATE member_profile SET content = #{content}, 
			photo = CASE WHEN #{photo} IS NOT NULL THEN #{photo, jdbcType=VARCHAR} ELSE photo END
		WHERE user_num = #{user_num}
	</update>

	<update id="updateInfo" parameterType="com.fly.dds.domain.Member">
		UPDATE member_info SET nickname=#{nickName} , gender=#{gender} , tel=#{tel} , modify_date = sysdate
		WHERE user_num = #{user_num}
	</update>
	
	<update id="updateMember" parameterType="com.fly.dds.domain.Member">
		UPDATE member1 SET username = #{userName}
		WHERE user_num = #{user_num}
	</update>
	
	<update id="deleteMember" parameterType="Long">
		UPDATE member1 SET enabled = 0
		WHERE user_num = #{user_num}
	</update>
	
	<delete id="deleteInfo" parameterType="Long">
		DELETE member_info where user_num = #{user_num}
	</delete>
	
	<delete id="deleteProfile" parameterType="Long">
		DELETE member_profile where user_num = #{user_num}
	</delete>
	
	<select id="listReview" parameterType="map" resultType="com.fly.dds.domain.TravelReview">
	    SELECT t.NUM,SUBJECT,TO_CHAR(REG_DATE, 'YYYY-MM-dd') REG_DATE, HITCOUNT,LIKECOUNT,REPLYCOUNT
		FROM TRAVELREVIEW t
		left outer join ( select num , count(*) as likecount from travelReview_like group by num) l on t.num = l.num
		left outer join ( select num , count(*) as replycount from travelReview_reply group by num ) r on t.num = r.num
		where user_num = #{user_num}
		ORDER BY NUM DESC
		OFFSET #{offset} ROWS FETCH FIRST #{size} ROWS ONLY
	</select>
	
	<!-- 글개수 -->
	<select id="dataCount" parameterType="map" resultType="Integer">
		SELECT NVL(COUNT(distinct t.num), 0)
		FROM travelReview t
		JOIN member1 m on t.user_num = m.user_num
		WHERE m.user_num = #{user_num}
	</select>
	
</mapper>